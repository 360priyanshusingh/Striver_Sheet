class Solution {
public:
    bool is_Birpatite_dfs( vector<int>&colored,int node, unordered_map<int,vector< int >> &adj){

        for(auto it:adj[node]){
            if(colored[it]==-1){
               colored[it]=1-colored[node];
               if(!is_Birpatite_dfs(colored,it,adj)) return false;
            }
            else if(colored[node]==colored[it]) return false;
        }
    
    
    return true;
    
}
    bool isBipartite(vector<vector<int>>& graph) {
        
    int n=graph.size();
    int m=graph[0].size();
    unordered_map<int,vector< int >> adj;
    for(int i=0;i<n;i++){
         int u=i;
        for(int j=0;j<graph[i].size();j++){
             int v=graph[i][j];
             adj[u].push_back(v);
        }
    }
    vector<int> colored(n,-1);
    for(int i=0;i<n;i++){

        if(colored[i]==-1)
            //  colored[0]=1;
            if(!is_Birpatite_dfs(colored,i,adj)) return false;
    }

    return true;
    }
};