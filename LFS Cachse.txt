struct Node {
    long long  key, value, cnt;
    Node *next; 
    Node *prev;
    Node(  long long _key,  long long _value) {
        key = _key;
        value = _value; 
        cnt = 1; 
    }
}; 

struct List {
      long long size; 
    Node *head; 
    Node *tail; 
    List() {
        head = new Node(-1, -1); 
        tail = new Node(-1,-1); 
        head->next = tail;
        tail->prev = head; 
        size = 0;
    }
    
    void addFront(Node *node) {
        Node* temp = head->next;
        node->next = temp;
        node->prev = head;
        head->next = node;
        temp->prev = node;
        size++; 
    }
    
    void removeNode(Node* delnode) {
        Node* delprev = delnode->prev;
        Node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
        size--; 
    }
    
    
    
};
class LFUCache {
    
    map<  long long, Node*> keyNode; 
    map<  long long, List*> freqListMap; 
      long long maxSizeCache;
      long long minFreq; 
     long long curSize; 
public:
    LFUCache(  long long capacity) {
        maxSizeCache= capacity;
        minFreq=0;
        curSize=0;
    }
    
    void updateFreqListMap(Node *node)
    {
        keyNode.erase(node->key);
        freqListMap[node->cnt]->removeNode(node);
        
        if(node->cnt==minFreq &&  freqListMap[node->cnt]->size==0 )
        {
          minFreq++; 
        }
        
        List *list=new List();
        
               if(freqListMap.find( node->cnt+1)!=freqListMap.end())
                { 
                    list=freqListMap[node->cnt+1];
                    
                }
                
         node->cnt+=1;
         list->addFront(node);
         freqListMap[node->cnt]=list;
          keyNode[node->key]=node;
        
        
    }
    
    int get(  long long key) {
        if(keyNode.find(key)!=keyNode.end())
        {
          Node* tem1= keyNode[key] ;
            long long res=tem1->value;
           updateFreqListMap(tem1); 
           return res;
            
        }
        
        return -1;
    }
    
    void put(  long long key,  long long value) {
            if( maxSizeCache==0)
                return;
        
            if(keyNode.find(key)!=keyNode.end())
            {
             Node* tem1= keyNode[key] ;
             tem1->value=value;
             updateFreqListMap(tem1); 
                
            }
            else
            {
                if(curSize== maxSizeCache)
                {
                    List *tem1= freqListMap[minFreq];
                    keyNode.erase(tem1->tail->prev->key);
                    tem1->removeNode(tem1->tail->prev);
                    curSize--;
                }
                  curSize++;
                  minFreq=1;
                
                List *list= new List();
                if(freqListMap.find( minFreq)!=freqListMap.end())
                { 
                    list=freqListMap[minFreq];
                    
                }
                
                 Node *newnode= new Node(key,value);
                 list->addFront(newnode);
                 keyNode[key]=newnode;
                freqListMap[minFreq]=list;
                
                
            }
    }
};