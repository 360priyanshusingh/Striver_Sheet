#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
     vector<vector<int>> ans;
    if(root==NULL) return ans;
    stack<pair<BinaryTreeNode<int> *,int>> st;
    vector<int> inorder,preorder,postorder;
    st.push({root,1});
    while(!st.empty()){
        BinaryTreeNode<int> * node=st.top().first;
        int num=st.top().second;
        st.pop();
        if(num==1){
           preorder.push_back(node->data) ;
            num++;
            st.push({node,num});
            if(node->left!=NULL) st.push({node->left,1});
        }
        else if(num==2){
            inorder.push_back(node->data);
            num++;
            st.push({node,num});
            if(node->right!=NULL) st.push({node->right,1});
        }
        else if(num==3){
            postorder.push_back(node->data);
            num++;
            st.push({node,num});
        }
        
    }
   
    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);
    
    return ans;
}