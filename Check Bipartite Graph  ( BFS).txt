#include<bits/stdc++.h>
bool is_Birpatite_bfs( vector<int>&colored,int node, unordered_map<int,vector< int >> &adj){
    queue<int> q;
    q.push(node);
    colored[node]=1;
    while(!q.empty()){
        int front=q.front();
        int color=colored[front];
        q.pop();
        for(auto it:adj[front]){
            if(colored[it]==-1){
                colored[it]=1-color;
                q.push(it);
            }
            else if(color==colored[it]) return false;
        }
    }
    
    return true;
    
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
    
    int n=edges.size();
    int m=edges[0].size();
    unordered_map<int,vector< int >> adj;
    for(int i=0;i<n;i++){
         int u=i;
        for(int j=1;j<m;j++){
            if(edges[i][j]==1){
             int v=j;
            adj[u].push_back(v);
            adj[v].push_back(u);    
            }
          
        }
    }
    vector<int> colored(n,-1);
    for(int i=0;i<n;i++){
        if(colored[i]==-1)
            if(!is_Birpatite_bfs(colored,i,adj)) return false;
    }
    return true;
}