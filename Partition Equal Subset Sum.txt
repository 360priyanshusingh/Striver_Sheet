class Solution {
public:
    // bool helper(vector<int>&  nums,int target,int index,int n ,vector<vector<int>> &dp){
//          if(target==0) return true;
//          if(target<0) return false;
//          if(index==n){
//             if(target==0) return true;
//             else return false;
//          }
        
//         if(dp[index][target]!=-1) return dp[index][target]; 
        
//         bool nontake=helper(nums,target,index+1,n,dp);
//         bool take=helper(nums,target-nums[index],index+1,n,dp);
//         return dp[index][target]= nontake || take; 
//     }
    bool canPartition(vector<int>& nums) {
        int sum=0;
        for(auto c:nums)sum+=c;
        int n=nums.size();
        if(sum%2!=0) return  false;
        sum=sum/2;
        vector<vector<bool>> dp(n+1,vector<bool>(sum+1));
        for(int i=0;i<=sum;i++){
            if(nums[0]==i)dp[0][i]=true;
            else dp[0][i]=false;
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=sum;j++){
                 bool nontake=dp[i-1][j];
                 bool take=false;
                if(j>=nums[i])
                 take=dp[i-1][j-nums[i]];
                
                dp[i][j]= nontake || take ;
            }
        }
        
        return dp[n-1][sum];
    }
};