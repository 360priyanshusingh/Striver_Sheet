struct Node{
    
    Node *Links[2];
    public:
    bool cantainsKey(int bit){
        return (Links[bit]!=NULL);
    }
    
    Node *get(int bit){
        return Links[bit];
    }
    
    void set(int bit,Node *node){
        Links[bit]=node;
    }
    
};

class Trie{
    
    Node *root;
    
    public:
    
    Trie(){
        root=new Node();
    }
    
    void insert(int num){
        Node *node=root;
        
        for(int i=31; i>=0;i--){
            
            int bit= ( num  >> i) & 1;
            if(!node->cantainsKey( bit )){
                
                node->set(bit,new Node());
            }
            
               node=node->get(bit);
        }
               
    }
          
               
    int maxint(int num){
        
        Node *node=root;
        int maxNum=0;
         for(int i=31; i>=0;i--){
            int bit= ( num  >> i) & 1 ;
            if(node->cantainsKey( 1-bit )){
               
                maxNum= maxNum | (1 << i);
                node=node->get(1-bit);
            }
            else
                node=node->get(bit);
        }
        
               
             return maxNum;
    }    
               
};

class Solution {
    
public:
    int findMaximumXOR(vector<int>& nums) {
        
        Trie node;
        int maxXOR;
        for(auto  it :nums) node.insert(it);
        
        for( auto it : nums){
            maxXOR=max(maxXOR,node.maxint(it));
        }
        
       return maxXOR; 
    }
};