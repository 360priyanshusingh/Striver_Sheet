#include<bits/stdc++.h>
void addNum(int num, priority_queue<int>  &maxheap,priority_queue<    int , vector<int> , greater<int>> &minheap) {
        
        if(maxheap.empty() || maxheap.top()>num)
           maxheap.push(num);
        else
            minheap.push(num);
        
        if(maxheap.size()> minheap.size()+1)
        {
            minheap.push(maxheap.top());
            maxheap.pop();
        }
        else if(minheap.size()>maxheap.size())
        {
            maxheap.push(minheap.top());
            minheap.pop();
        }
        
        return;
    }
 int findMedian( priority_queue<int> maxheap, priority_queue<int , vector<int> , greater<int>> &minheap) {
        if(maxheap.size()==minheap.size())
        {
            return  (maxheap.top()+minheap.top())/2;
        }
        else
        {
           return   maxheap.top();
        }
    }
    
void findMedian(int *arr, int n)
{
    priority_queue<int> maxheap;
    priority_queue< int , vector<int> , greater<int>> minheap;
    // Write your code here
    for(int i=0;i<n;i++)
    {
        addNum(arr[i],maxheap,minheap);
        cout<<findMedian(maxheap,minheap)<<" ";
    }
}