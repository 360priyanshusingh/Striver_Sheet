class Solution {
public:
    int dp[601][101][101];
//     int helper(vector<string>& strs,int index,int m,int n){
        
//         if(strs.size()==index) return 0;
//         if(m<=0 && n<=0) return 0;
//         int zeors=0;
//         int ones=0;
//         if(dp[index][n][m]!=-1) return dp[index][n][m];
//         for(auto c:strs[index])
//         {
//             if(c=='0') zeors++;
//             else  ones++;
//         }
        
//         int ans=helper(strs,index+1,m,n);
//         if(m>=zeors && n>=ones)
//         ans=max(ans,1+helper(strs,index+1,m-zeors,n-ones));
//         return dp[index][n][m]=ans;
//     }
    int findMaxForm(vector<string>& strs, int m, int n) {
        memset(dp,0,sizeof(dp));
        int len=strs.size();
        
        for(int i=1;i<=len;i++)
        {
            for(int j=0;j<=n;j++)
            {
                for(int k=0; k<=m;k++)
                {
                    int zeors=0;
                    int ones=0;
                   for(auto c:strs[i-1])
                   {
                     if(c=='0') zeors++;
                     else  ones++;
                   }   
                    
                   int ans=dp[i-1][j][k];
                   if(k>=zeors && j>=ones) 
                   ans=max(ans,1+dp[i-1][j-ones][k-zeors]);
                    
                    dp[i][j][k]=ans;
                }
            }
        }
        
        return dp[len][n][m];
    }
};