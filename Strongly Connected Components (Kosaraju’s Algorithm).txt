#include<bits/stdc++.h>
void Dfs(int node,vector<int> &visited,vector<int> transposeAdj[],vector<int> &v){
    visited[node]=1;
    v.push_back(node);
    for(auto it:transposeAdj[node]){
        if(visited[it]==0)
            Dfs(it,visited,transposeAdj,v);
    }
    
    return ;
}
void topoSort_Dfs(int node,vector<int> &visited,vector<int> adj[], stack<int> &st){
    visited[node]=1;
    for(auto it:adj[node]){
        if(visited[it]==0)
             topoSort_Dfs(it,visited,adj,st);
    }
    st.push(node);
}

vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    // Write your code here.
    int m=edges.size();
    vector<int> visited(n,0);
    vector<int> adj[n];
    stack<int> st;
    for(int i=0;i<m;i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    for(int i=0;i<n;i++){
        if(visited[i]==0)
             topoSort_Dfs(i,visited,adj,st);
    }
    
     vector<int> transposeAdj[n];
    for(int i=0;i<n;i++){
        visited[i]=0;
        for(auto it:adj[i])
         transposeAdj[it].push_back(i);
    }
    vector<vector<int>> ans;
    
      while(!st.empty()){
          int front=st.top();
          st.pop();
            vector<int> v;
         if(visited[front]==0){
             Dfs(front,visited,transposeAdj,v);
         }
             ans.push_back(v);
          
      }
    
   return ans; 
}