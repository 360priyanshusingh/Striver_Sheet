/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& inorder, vector<int>& postorder,int postsart,int postend,int instrat,int inend, map<int,int>&mp){
              if(postsart>postend || instrat>inend) return NULL;
              TreeNode* root=new TreeNode(postorder[postend]) ;
              int inorderootindex=mp[root->val];
              int elem=inend-inorderootindex;

              root->left=helper(inorder,postorder,postsart,postend-elem-1,instrat,inorderootindex-1,mp);
              root->right=helper(inorder,postorder,postend-elem,postend-1,inorderootindex+1,inend,mp);
              return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postend=postorder.size()-1;
        int inend=inorder.size()-1;
        map<int,int> mp;
        for(int i=0;i<=inend;i++){
          mp[inorder[i]]=i;
        }

       return  helper( inorder,postorder,0,postend,0,inend,mp);
    }
};