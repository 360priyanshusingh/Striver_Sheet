class Solution {
public:
    vector<int> nextSmallerElementR(vector<int> arr, int n)
{
    // Write your code here.
    vector<int> ans(n);
    stack<int> st;
    
    for(int i=n-1;i>=0;i--)
    {
        while(st.empty()==false && arr[st.top()]>=arr[i])
            st.pop();
       
      if(st.empty()==false && arr[st.top()]<arr[i])
         ans[i]=st.top()-1;
        
      if(st.empty()==true)
         ans[i]=n-1;
        st.push(i);
    }
     return ans;
}
    vector<int> nextSmallerElementL(vector<int> arr, int n)
    {
                vector<int> ans(n);
                 stack<int> st;
    
                 for(int i=0;i<n;i++)
                 {
                    while(st.empty()==false && arr[st.top()]>=arr[i])
                      st.pop();
         
                   if(st.empty()==false && arr[st.top()]<arr[i])
                      ans[i]=st.top()+1;
                       
                   if(st.empty()==true)
                       ans[i]=0;
                             
                      st.push(i);
                  }
     return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
    
        vector<int>  Lefts;
        vector<int>  Rights;
        int n=heights.size();
         Rights=nextSmallerElementR(heights,n);
         Lefts=nextSmallerElementL(heights, n);
        int max=INT_MIN;
        for(int i=0;i<n;i++)
        {
            if( (Rights[i]- Lefts[i] +1) *heights[i] >max )
                max=(Rights[i]- Lefts[i] +1) *heights[i];
                
        }
        
        return max;
    }
};