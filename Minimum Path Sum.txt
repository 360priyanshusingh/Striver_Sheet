class Solution {
public:
//     int  helper(vector<vector<int>>& grid,int row,int col,int n,int m,vector<vector<int>> &dp){
        
//         if(row==n-1 && col==m-1) return grid[row][col];

//         if(row <0 || col<0 || row>=n || col>=m ) return INT_MAX;
        
//         if(dp[row][col]!=-1) return dp[row][col];
//         int ans1=helper( grid,row, col+1,n, m,dp);
//         int ans2=helper( grid,row+1, col,n, m,dp);
        
//         return dp[row][col]=grid[row][col]+min(ans1,ans2);
        
//     }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n+1, vector<int> (m+1,-1) );
        dp[n-1][m-1]=grid[n-1][m-1];
        for(int i=n-2;i>=0;i--)
            dp[i][m-1]=grid[i][m-1]+dp[i+1][m-1];
        
        for(int i=m-2;i>=0;i--)
            dp[n-1][i]=grid[n-1][i]+dp[n-1][i+1];   
        
        for(int i=n-2;i>=0;i--){
            for(int j=m-2;j>=0;j--){
                dp[i][j]=grid[i][j]+min(dp[i][j+1],dp[i+1][j]);
            }
        }
     
        return dp[0][0];
    }
};