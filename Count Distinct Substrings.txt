struct Node{
    Node *Links[26];
    
    bool caintainsKey(char ch){
        return (Links[ch-'a'] != NULL);  
    }
    Node *get(char ch){
        return Links[ch -'a'];
    }
    
    void set(char ch,Node *node){
        Links[ch-'a']=node;
    }
    
};

class Trie{
    public:
    Node *root;
    int count;
    
    Trie(){
        root=new Node;
        count=0;
    }
    
    void insert(string word){
        Node *node=root;
        for(int i=0;i<word.size();i++){
            if(!node->caintainsKey(word[i])){
                node->set(word[i],new Node());
                count++;
            }
            node=node->get(word[i]);
        }
    }
};

int countDistinctSubstrings(string &s)
{
    //    Write your code here. 
    Trie obj;
    
    for(int i=0;i<s.size();i++){
        for(int j=i;j<s.size();j++){
            obj.insert(s.substr(i,j-i+1));  
        }
    }
    
    return obj.count+1;
}