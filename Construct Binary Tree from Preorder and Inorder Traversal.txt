/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& preorder,vector<int>& inorder,int prestart,int preend,int instart,int inend,map<int,int>&mp){
          if(prestart>preend || instart> inend ) return NULL;

           TreeNode* root= new TreeNode(preorder[prestart]);
           int inorderrootindex=mp[root->val];
           int elem=inorderrootindex-instart;

           root->left=helper(preorder,inorder,prestart+1,prestart+elem ,instart,inorderrootindex-1,mp);
           root->right=helper(preorder,inorder,prestart+elem+1, preend,inorderrootindex+1,inend,mp);

           return root;


    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preend=preorder.size()-1;
        int inend=inorder.size()-1;
        map<int,int> mp;
        for(int i=0;i<=inend;i++){
          mp[inorder[i]]=i;
        }

       return  helper( preorder, inorder,0,preend,0,inend,mp);
    }
};