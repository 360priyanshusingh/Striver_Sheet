class Solution {
public:
     void helper(vector<int>& candidates,int target, vector<int> v,vector<vector<int>> &res,int index,int k)
    {
           if(target==0 ){
               
               if(v.size()==k)
                res.push_back(v);
               return;
           }
      
        
        for(int i=index;i<candidates.size();i++)
        {
            if( i>index && candidates[i]==candidates[i-1] ) 
                continue;
            if(candidates[i]> target) break;
            
            v.push_back(candidates[i]);
            helper(candidates,target-candidates[i],v,res,i+1,k);
            v.pop_back();
        }
    
        return;
    }

    vector<vector<int>> combinationSum3(int k, int n) {
         vector<int> candidate;
           for(int i=1;i<10;i++)
            candidate.push_back(i);
            vector<vector<int>> ans;
         vector<int> v;
        // sort(candidates.begin(),candidates.end());
         helper(candidate,n,v,ans,0,k);
         return ans;
    }
};