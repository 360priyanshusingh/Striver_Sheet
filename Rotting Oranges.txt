class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int r=grid.size();
        int c=grid[0].size();
        // if(r==1 && c==1 && grid[0][0]==1) return -1;
        // if(r==1 && c==1 && grid[0][0]==0) return 0;
        int visited[r][c];
        queue<pair<pair<int,int>,int>> q;
        
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    visited[i][j]=2;
                }
                
            }
        }
        
        int tm=0;
        int rA[]={-1,0,1,0};
        int cA[]={0,1,0,-1};
        while(!q.empty())
        {
            int  cr=q.front().first.first;
            int  cc=q.front().first.second;
            int  ct=q.front().second;
            tm=max(tm,ct);
            q.pop();
            for(int i=0;i<4;i++)
            {
               int nr= cr+rA[i];
               int nc= cc+cA[i];
                
                if(nr<r && nr>=0 && nc<c && nc>=0 &&  visited[nr][nc]!=2 &&  grid[nr][nc]==1)
                {
                      q.push({{nr,nc},ct+1});
                      visited[nr][nc]=2;
                }
            }
            
       
        }
        
      for(int i=0;i<r;i++)
            {
                for(int j=0;j<c;j++)
                {
                    if( visited[i][j]!=2 && grid[i][j]==1)
                        return -1;
                }
            }
        
        return tm;  
        
    }
};